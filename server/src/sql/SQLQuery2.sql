CREATE TABLE GIAO_HANG_LE.TAI_KHOAN (
    ten_dang_nhap VARCHAR(32) PRIMARY KEY,
    mat_khau VARCHAR(32) NOT NULL,
    diem_thuong INT NOT NULL DEFAULT 0
);

--INSERT INTO GIAO_HANG_LE.TAI_KHOAN VALUES('admin', 'root', 0);
--INSERT INTO GIAO_HANG_LE.TAI_KHOAN VALUES('trung.nguyen', 'trung1234', 200);
--INSERT INTO GIAO_HANG_LE.TAI_KHOAN VALUES('khang.nguyen', 'khang1234', 200);
--INSERT INTO GIAO_HANG_LE.TAI_KHOAN VALUES('phat.nguyen', 'phat1234', 200);
--INSERT INTO GIAO_HANG_LE.TAI_KHOAN VALUES('dat.du', 'dat1234', 200);


CREATE TABLE GIAO_HANG_LE.KHACH_HANG (
    ma_khach_hang INT PRIMARY KEY IDENTITY(0,1),
    ten_dang_nhap VARCHAR(32) NOT NULL UNIQUE,
    ten_khach_hang VARCHAR(32) NOT NULL,
    dia_chi VARCHAR(128) NOT NULL,
    so_dien_thoai CHAR(10) NOT NULL UNIQUE,
    email VARCHAR(64) NOT NULL UNIQUE,

    FOREIGN KEY (ten_dang_nhap) REFERENCES GIAO_HANG_LE.TAI_KHOAN(ten_dang_nhap) ON DELETE CASCADE ON UPDATE CASCADE
);

--INSERT INTO GIAO_HANG_LE.KHACH_HANG VALUES('admin', 'admin', '0', 0909000000, 'admin@company.com');
--INSERT INTO GIAO_HANG_LE.KHACH_HANG VALUES ('trung.nguyen', 'Nguyen Thanh Trung', '497 Hoa Hao, Phuong 07, Quan 10, TP HCM', 0772220220, 'trung.nguyen@gmail.com');
--INSERT INTO GIAO_HANG_LE.KHACH_HANG VALUES ('khang.nguyen', 'Nguyen Duy Khang', 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', 0909009009, 'khang.nguyen@gmail.com');
--INSERT INTO GIAO_HANG_LE.KHACH_HANG VALUES ('phat.nguyen', 'Nguyen Tan Phat', 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', 0989124245, 'phat.nguyen@gmail.com');
--INSERT INTO GIAO_HANG_LE.KHACH_HANG VALUES ('dat.du', 'Du Thanh Dat', 'Ky tuc xa khu B, Phuong Dong Hoa, TP Di An, Tinh Binh Duong', 0978145246, 'dat.du@gmail.com');

--SELECT * FROM GIAO_HANG_LE.KHACH_HANG;

CREATE TABLE GIAO_HANG_LE.DON_HANG (
    ma_don_hang INT PRIMARY KEY IDENTITY(0,1),
	ma_khach_hang INT NOT NULL,
    trong_luong FLOAT NOT NULL DEFAULT 0,
    can_giao_di BIT NOT NULL,
    dia_chi_di VARCHAR(128) NOT NULL,
    dia_chi_den VARCHAR(128) NOT NULL,
	gia_tien INT NOT NULL DEFAULT 0

	FOREIGN KEY (ma_khach_hang) REFERENCES GIAO_HANG_LE.KHACH_HANG(ma_khach_hang) ON DELETE CASCADE ON UPDATE CASCADE

	CONSTRAINT check_giatien_donhang
		CHECK (gia_tien >= 0)
);

--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (1, 1.2, 1, '497 Hoa Hao, Phuong 07, Quan 10, TP HCM', '3 Nguyen Gia Thieu, Phuong 12, Quan 3, TP HCM', 12000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (1, 7.5, 0, '497 Hoa Hao, Phuong 07, Quan 10, TP HCM', 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', 24000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (3, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '3 Nguyen Gia Thieu, Phuong 12, Quan 3, TP HCM', 24000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (2, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '47 Hoang Hoa Tham, Quan Hoan Kiem, TP Ha Noi', 50000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (3, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '120 Ba Cu, Phuong 5, TP Vung Tau, Tinh Ba Ria Vung Tau', 35000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (4, 5, 1, 'Ky tuc xa khu B, Phuong Dong Hoa, TP Di An, Tinh Binh Duong', '20/4 Phan Huy Ich, Phuong 5, Quan Phu Nhuan, TP HCM', 24000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (1, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '72/10/1 Kinh Duong Vuong, Phuong An Lac, Quan Binh Tan, TP HCM', 30000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (2, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '120 Ba Cu, Phuong 5, TP Vung Tau, Tinh Ba Ria Vung Tau', 35000);
--INSERT INTO GIAO_HANG_LE.DON_HANG VALUES  (2, 5, 1, 'Ky tuc xa khu A, Phuong Linh Trung, TP Thu Duc, TP HCM', '72/10/1 Kinh Duong Vuong, Phuong An Lac, Quan Binh Tan, TP HCM', 30000);

--SELECT * FROM GIAO_HANG_LE.DON_HANG;

CREATE TABLE GIAO_HANG_LE.KHO_HANG (
    ma_kho_hang INT PRIMARY KEY IDENTITY(0,1),
    ten_kho_hang VARCHAR(32) NOT NULL UNIQUE,
    dia_chi VARCHAR(128) NOT NULL UNIQUE
);



CREATE TABLE GIAO_HANG_LE.CHANG (
    ma_chang INT PRIMARY KEY IDENTITY(0,1),
    kho_bat_dau INT NOT NULL,
    kho_ket_thuc INT NOT NULL,
    phi_duoi_1kg DECIMAL(10, 4) NOT NULL,
    phi_duoi_10kg DECIMAL(10, 4) NOT NULL,
    phi_tren_10kg DECIMAL(10, 4) NOT NULL,

    FOREIGN KEY (kho_bat_dau) REFERENCES GIAO_HANG_LE.KHO_HANG(ma_kho_hang),
    FOREIGN KEY (kho_ket_thuc) REFERENCES GIAO_HANG_LE.KHO_HANG(ma_kho_hang),

	CONSTRAINT check_giatien_chan1
		CHECK (phi_duoi_1kg >= 0 AND phi_duoi_10kg >= 0 AND phi_tren_10kg >= 0) 
);

CREATE TABLE GIAO_HANG_LE.DAT_HANG (
    ma_don_hang INT PRIMARY KEY,
    ma_khach_hang INT NOT NULL,
    thoi_gian DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_khach_hang) REFERENCES GIAO_HANG_LE.KHACH_HANG(ma_khach_hang) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.DI_QUA (
    ma_don_hang INT NOT  NULL,
    ma_chang INT NOT NULL,
    thu_tu INT NOT NULL DEFAULT 0,

	PRIMARY KEY (ma_don_hang, ma_chang),

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_chang) REFERENCES GIAO_HANG_LE.CHANG(ma_chang) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.THUNG_HANG (
    ma_thung_hang INT PRIMARY KEY IDENTITY(0,1),
    ma_chang INT NOT NULL,

    FOREIGN KEY (ma_chang) REFERENCES GIAO_HANG_LE.CHANG(ma_chang) ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.NHAN_VIEN (
    ma_nhan_vien INT PRIMARY KEY IDENTITY(0,1),
    ten_dang_nhap VARCHAR(32) NOT NULL UNIQUE,
    ten_nhan_vien VARCHAR(32) NOT NULL,
    dia_chi VARCHAR(128) NOT NULL,
    so_dien_thoai DECIMAL(10, 0) NOT NULL UNIQUE,
    email VARCHAR(64) NOT NULL UNIQUE,

    FOREIGN KEY (ten_dang_nhap) REFERENCES GIAO_HANG_LE.TAI_KHOAN(ten_dang_nhap) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.KIEM_KHO (
    ma_nhan_vien INT PRIMARY KEY,
	ma_so_kho INT,
    phong INT NOT NULL,

    FOREIGN KEY (ma_nhan_vien) REFERENCES GIAO_HANG_LE.NHAN_VIEN(ma_nhan_vien) ON UPDATE CASCADE
	FOREIGN KEY (ma_so_kho) REFERENCES GIAO_HANG_LE.KHO_HANG(ma_kho_hang) ON UPDATE CASCADE
);


CREATE TABLE GIAO_HANG_LE.TAI_XE (
    ma_tai_xe INT PRIMARY KEY,
    bien_so_xe VARCHAR(16) NOT NULL UNIQUE,

    FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.NHAN_VIEN(ma_nhan_vien)  ON UPDATE CASCADE
);


CREATE TABLE GIAO_HANG_LE.ROI_KHO (
    ma_thung INT PRIMARY KEY,
    thoi_gian_di DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	ma_tai_xe INT NOT NULL,
    ma_kiem_kho INT NOT NULL,

	FOREIGN KEY (ma_kiem_kho) REFERENCES GIAO_HANG_LE.KIEM_KHO(ma_nhan_vien),
	FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.TAI_XE(ma_tai_xe) ON UPDATE CASCADE,
    FOREIGN KEY (ma_thung) REFERENCES GIAO_HANG_LE.THUNG_HANG(ma_thung_hang) ON UPDATE CASCADE
);


CREATE TABLE GIAO_HANG_LE.DEN_KHO (
	ma_thung INT PRIMARY KEY,
    thoi_gian_den DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	ma_tai_xe INT NOT NULL,
    ma_kiem_kho INT NOT NULL,

	FOREIGN KEY (ma_kiem_kho) REFERENCES GIAO_HANG_LE.KIEM_KHO(ma_nhan_vien),
	FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.TAI_XE(ma_tai_xe) ON UPDATE CASCADE,
    FOREIGN KEY (ma_thung) REFERENCES GIAO_HANG_LE.THUNG_HANG(ma_thung_hang) ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.DONG_GOI (
    ma_don_hang INT NOT NULL,
    ma_thung_hang INT NOT NULL,
    ma_kiem_kho INT NOT NULL,
    thoi_gian DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (ma_don_hang, ma_thung_hang),

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_thung_hang) REFERENCES GIAO_HANG_LE.THUNG_HANG(ma_thung_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_kiem_kho) REFERENCES GIAO_HANG_LE.KIEM_KHO(ma_nhan_vien) ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.GIAO_DI (
    ma_don_hang INT NOT NULL,
    thoi_gian DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ma_tai_xe INT NOT NULL,
    thanh_cong BIT NOT NULL,
    ly_do VARCHAR(64),

	PRIMARY KEY (ma_don_hang, thoi_gian, ma_tai_xe),

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.TAI_XE(ma_tai_xe) ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.GIAO_DEN (
    ma_don_hang INT NOT NULL,
    thoi_gian DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ma_tai_xe INT NOT NULL,
    thanh_cong BIT NOT NULL,
    ly_do VARCHAR(64),

	PRIMARY KEY (ma_don_hang, thoi_gian, ma_tai_xe),

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.TAI_XE(ma_tai_xe) ON UPDATE CASCADE
);

CREATE TABLE GIAO_HANG_LE.GIAO_DEN_KHO(
    ma_don_hang INT NOT NULL,
    ma_tai_xe INT,
    ma_kiem_kho INT NOT NULL,
    thoi_gian DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	thanh_cong BIT NOT NULL,
    ly_do VARCHAR(64),

    PRIMARY KEY (ma_don_hang, ma_kiem_kho),

    FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ma_tai_xe) REFERENCES GIAO_HANG_LE.TAI_XE(ma_tai_xe) ON UPDATE CASCADE,
    FOREIGN KEY (ma_kiem_kho) REFERENCES GIAO_HANG_LE.KIEM_KHO(ma_nhan_vien)
);


CREATE TABLE GIAO_HANG_LE.NGUOINHAN (
	ma_don_hang INT PRIMARY KEY,
	ten_nguoi_nhan VARCHAR(32) NOT NULL,
    so_dien_thoai DECIMAL(10, 0) NOT NULL,
	
	FOREIGN KEY (ma_don_hang) REFERENCES GIAO_HANG_LE.DON_HANG(ma_don_hang) ON DELETE CASCADE ON UPDATE CASCADE
); 


CREATE OR ALTER TRIGGER Check_Khoiluong
ON GIAO_HANG_LE.DON_HANG
FOR  INSERT, UPDATE 
AS
BEGIN
	DECLARE @kl FLOAT;
	SELECT @kl = trong_luong from INSERTED;
	IF (@kl > 10.0) 
	BEGIN
		RAISERROR ('Khoi luong don hang khong duoc vuot qua 10kg', 16, 1);
		ROLLBACK; 
	END;
END;


CREATE OR ALTER TRIGGER Check_SoluongNV
ON GIAO_HANG_LE.KIEM_KHO
FOR  INSERT, UPDATE 
AS
BEGIN
	DECLARE @sum INT;

	SELECT @sum = COUNT(GIAO_HANG_LE.KIEM_KHO.ma_nhan_vien)
	FROM INSERTED, GIAO_HANG_LE.KIEM_KHO
	WHERE INSERTED.ma_so_kho = GIAO_HANG_LE.KIEM_KHO.ma_so_kho AND INSERTED.phong = GIAO_HANG_LE.KIEM_KHO.phong
	GROUP BY GIAO_HANG_LE.KIEM_KHO.phong;

	IF (@sum > 10)
	BEGIN
	RAISERROR ('So nhan vien trong mot phong khong the lon hon 10', 16, 1);
	ROLLBACK; 
	END;
END;

CREATE OR ALTER TRIGGER Check_Solannhan
ON GIAO_HANG_LE.GIAO_DEN
FOR INSERT
AS
BEGIN
	DECLARE @sum INT;

	SELECT @sum = COUNT(*)
	FROM INSERTED, GIAO_HANG_LE.GIAO_DEN
	WHERE INSERTED.ma_don_hang = GIAO_HANG_LE.GIAO_DEN.ma_don_hang
	GROUP BY GIAO_HANG_LE.GIAO_DEN.ma_don_hang;

	IF (@sum > 5)
	BEGIN
	RAISERROR ('Khong the luu kho qua 5 lan', 16, 1);
	ROLLBACK; 
	END;
END;

CREATE OR ALTER TRIGGER Check_Solangui
ON GIAO_HANG_LE.GIAO_DI
FOR INSERT
AS
BEGIN
	DECLARE @sum INT;

	SELECT @sum = COUNT(*)
	FROM INSERTED, GIAO_HANG_LE.GIAO_DI
	WHERE INSERTED.ma_don_hang = GIAO_HANG_LE.GIAO_DI.ma_don_hang
	GROUP BY GIAO_HANG_LE.GIAO_DI.ma_don_hang;

	IF (@sum > 5)
	BEGIN
	RAISERROR ('Khong the lay hang tu nguoi gui, bi tu choi qua 5 lan!', 16, 1);
	ROLLBACK; 
	END;
END;






SELECT * FROM GIAO_HANG_LE.TAI_KHOAN;
SELECT * FROM  GIAO_HANG_LE.DON_HANG;
SELECT * FROM  GIAO_HANG_LE.KHO_HANG;
SELECT * FROM  GIAO_HANG_LE.KHACH_HANG;
SELECT * FROM  GIAO_HANG_LE.DAT_HANG;
SELECT * FROM  GIAO_HANG_LE.CHANG;
SELECT * FROM  GIAO_HANG_LE.DI_QUA;
SELECT * FROM  GIAO_HANG_LE.THUNG_HANG;
SELECT * FROM  GIAO_HANG_LE.ROI_KHO;
SELECT * FROM  GIAO_HANG_LE.DEN_KHO;
SELECT * FROM  GIAO_HANG_LE.NHAN_VIEN;
SELECT * FROM  GIAO_HANG_LE.KIEM_KHO;
SELECT * FROM GIAO_HANG_LE.DONG_GOI;
SELECT * FROM GIAO_HANG_LE.TAI_XE;
SELECT * FROM  GIAO_HANG_LE.GIAO_DEN;
SELECT * FROM  GIAO_HANG_LE.GIAO_DI;
SELECT * FROM GIAO_HANG_LE.NGUOINHAN;
SELECT * FROM GIAO_HANG_LE.GIAO_DEN_KHO;